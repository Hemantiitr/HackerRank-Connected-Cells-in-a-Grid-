#include <bits/stdc++.h>
#define maax(a,b,c,d)   ((a>b)?((a>c)?(a>d?a:d):(c>d?c:d)):((b>c)?(b>d?b:d):(c>d?c:d)))
using namespace std;
bool v[10][10];
int matrix[11][11];

void dfs(int p,int q,int &count)
{
    v[p][q]=true;
    if(matrix[p][q]!=0){
        p--;
        q--;
        for(int i=p;i<p+3;i++)
            for(int j=q;j<q+3;j++)
            {
                if(matrix[i][j]==1 && v[i][j]==false){
                    count++;
                     dfs(i,j,count);
                }
            }
     }  
}
int connectedCell(int n,int m) {
    for(int i=0;i<n;i++){
       for(int j=0;j<m;j++)
           cout<<matrix[i][j]<<" ";
    cout<<endl;}
     for(int i=0;i<n;i++)
       for(int j=0;j<m;j++)
        v[i][j]=false;

    int ans=0,count;
    
    for(int i=1;i<n-1;i++)
        for(int j=1;j<m-1;j++)
        {
            if(matrix[i][j]==1 && v[i][j]==false){
                count=1;
                dfs(i,j,count);
               ans=max(ans,count);
               cout<<"#"<<count<<i<<j<<" ";}
        }
    return ans;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    int m;
    cin >> m;

    
    for (int i = 0; i <= n+1; i++) {
        for (int j = 0; j <= m+1; j++) {
              if(i==0 || j==0)
                matrix[i][j]=0;
              else if(i==n+1||j==m+1)
                matrix[i][j]=0;
              else 
                cin >> matrix[i][j];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    int result = connectedCell(n+2,m+2);

    fout << result << "\n";

    fout.close();

    return 0;
}
